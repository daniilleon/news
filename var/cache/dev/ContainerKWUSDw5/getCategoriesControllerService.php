<?php

namespace ContainerKWUSDw5;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCategoriesControllerService extends Module_KernelDevDebugContainer
{
    /**
     * Gets the public 'Module\Core\Categories\Controller\Api\CategoriesController' shared autowired service.
     *
     * @return \Module\Core\Categories\Controller\Api\CategoriesController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'module'.\DIRECTORY_SEPARATOR.'Core'.\DIRECTORY_SEPARATOR.'Categories'.\DIRECTORY_SEPARATOR.'Controller'.\DIRECTORY_SEPARATOR.'Api'.\DIRECTORY_SEPARATOR.'CategoriesController.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'module'.\DIRECTORY_SEPARATOR.'Core'.\DIRECTORY_SEPARATOR.'Categories'.\DIRECTORY_SEPARATOR.'Service'.\DIRECTORY_SEPARATOR.'CategoriesService.php';

        $a = ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService'));

        return $container->services['Module\\Core\\Categories\\Controller\\Api\\CategoriesController'] = new \Module\Core\Categories\Controller\Api\CategoriesController(new \Module\Core\Categories\Service\CategoriesService(($container->privates['Module\\Core\\Categories\\Repository\\CategoriesRepository'] ?? $container->load('getCategoriesRepositoryService')), ($container->privates['Module\\Core\\Categories\\Repository\\CategoryTranslationsRepository'] ?? $container->load('getCategoryTranslationsRepositoryService')), ($container->privates['Module\\Common\\Proxy\\Core\\LanguagesProxyService'] ?? $container->load('getLanguagesProxyServiceService')), ($container->privates['Module\\Core\\Categories\\Service\\CategoriesValidationService'] ?? $container->load('getCategoriesValidationServiceService')), ($container->privates['Module\\Common\\Service\\ImageService'] ?? $container->load('getImageServiceService')), ($container->privates['Module\\Common\\Helpers\\FieldUpdateHelper'] ?? $container->load('getFieldUpdateHelperService')), $a), $a, ($container->privates['Module\\Common\\Factory\\ResponseFactory'] ?? $container->load('getResponseFactoryService')));
    }
}
